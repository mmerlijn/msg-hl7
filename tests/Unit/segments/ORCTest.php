<?php

namespace mmerlijn\msgHl7\tests\Unit\segments;

use Carbon\Carbon;
use mmerlijn\msgHl7\Hl7;

use mmerlijn\msgHl7\segments\ORC;
use mmerlijn\msgRepo\Msg;
use mmerlijn\msgRepo\Name;

class ORCTest extends \mmerlijn\msgHl7\tests\TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_getter()
    {
        $orc = new ORC("ORC|NW|ZD12345678||ZD12345678|||^^^^^R||20220102103000+0200|^Doe^J.||01123456^van der Plas^B.^^^^^^VEKTIS|^^^Huisartsenpraktijk van der Plas&01123456^^^^^Huisartsenpraktijk van der Plas||||01123456^Huisartsenpraktijk van der Plas^VEKTIS||||Huisartsenpraktijk van der Plas^^01123456^^^VEKTIS");
        $msg = $orc->getMsg(new Msg());
        $this->assertSame("ZD12345678", $msg->order->request_nr);
        $this->assertSame("NEW", $msg->order->control->value);
        $this->assertSame("2022-01-02 10:30:00", $msg->order->dt_of_request->format("Y-m-d H:i:s"));
        $this->assertSame('Plas', $msg->order->requester->name->own_lastname);
        $this->assertSame('B', $msg->order->requester->name->initials);
        $this->assertSame('van der', $msg->order->requester->name->own_prefix);
        $this->assertSame('01123456', $msg->order->requester->agbcode);
        $this->assertSame('01123456', $msg->patient->last_requester);
        $this->assertSame('VEKTIS', $msg->order->requester->source);
        $this->assertFalse($msg->order->priority);
    }

    public function test_priority_getter()
    {
        $orc = new ORC("ORC|NW|ZD12345678||ZD12345678|||^^^^^R||20220102103000+0200|^Doe^J.||01123456^van der Plas^B.^^^^^^VEKTIS|^^^Huisartsenpraktijk van der Plas&01123456^^^^^Huisartsenpraktijk van der Plas||||01123456^Huisartsenpraktijk van der Plas^VEKTIS||||Huisartsenpraktijk van der Plas^^01123456^^^VEKTIS");
        $msg = $orc->getMsg(new Msg());
        $this->assertFalse($msg->order->priority);

        $orc = new ORC("ORC|NW|ZD12345678||ZD12345678|||^^^^^C||20220102103000+0200|^Doe^J.||01123456^van der Plas^B.^^^^^^VEKTIS|^^^Huisartsenpraktijk van der Plas&01123456^^^^^Huisartsenpraktijk van der Plas||||01123456^Huisartsenpraktijk van der Plas^VEKTIS||||Huisartsenpraktijk van der Plas^^01123456^^^VEKTIS");
        $msg = $orc->getMsg(new Msg());
        $this->assertTrue($msg->order->priority);

        $orc = new ORC("ORC|NW|ZD12345678||ZD12345678|||^^^^^S||20220102103000+0200|^Doe^J.||01123456^van der Plas^B.^^^^^^VEKTIS|^^^Huisartsenpraktijk van der Plas&01123456^^^^^Huisartsenpraktijk van der Plas||||01123456^Huisartsenpraktijk van der Plas^VEKTIS||||Huisartsenpraktijk van der Plas^^01123456^^^VEKTIS");
        $msg = $orc->getMsg(new Msg());
        $this->assertTrue($msg->order->priority);
    }

    public function test_setter()
    {
        $msg = new Msg();
        $orc = new ORC();
        $msg->order->priority = false;
        $msg->order->request_nr = "AB12341234";
        $msg->order->dt_of_request = Carbon::create("2022-01-02 09:30:00");
        $msg->order->requester->agbcode = "05123456";
        $msg->order->requester->setName(new Name(name: "de Groot", initials: "K.F."));
        $orc = $orc->setOrder($msg);

        $this->assertStringContainsString("NW|AB12341234||AB12341234|", $orc->write());
        $this->assertStringContainsString("||^^^^^R||", $orc->write());
        $this->assertStringContainsString(Carbon::create("2022-01-02 09:30:00")->format("YmdHisO"), $orc->write());
        $this->assertStringContainsString("|05123456^de Groot^KF", $orc->write());
        $string = $orc->write();
        $this->assertStringContainsString("", $string);
    }

    public function test_priority_setter()
    {
        $msg = new Msg();
        $msg->order->priority = false;
        $orc = new ORC();
        $orc = $orc->setOrder($msg);
        $this->assertStringContainsString("||^^^^^R", $orc->write());

        $msg = new Msg();
        $msg->order->priority = true;
        $orc = new ORC();
        $orc = $orc->setOrder($msg);
        $this->assertStringContainsString("||^^^^^C", $orc->write());
    }
}